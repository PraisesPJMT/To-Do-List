/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const todayListBox = document.querySelector('.list');\nconst addList = document.querySelector('.fa-check-to-slot');\nconst listInput = document.querySelector('input[name=\"task-input\"]');\nconst taskInput = document.querySelectorAll('input');\nconst listCatalogue = [\n  {\n    index: 4,\n    complete: false,\n    description: 'Task 4',\n  },\n  {\n    index: 2,\n    complete: false,\n    description: 'Task 2',\n  },\n  {\n    index: 3,\n    complete: false,\n    description: 'Task 3',\n  },\n  {\n    index: 1,\n    complete: false,\n    description: 'Task 1',\n  },\n];\n\nclass Task {\n  constructor(description) {\n    this.description = description;\n    this.complete = false;\n    this.index = null;\n  }\n\n  createTask = (index, complete, description) => {\n    listCatalogue.push({ index, complete, description });\n  }\n\n  removeTask = (item) => {\n    const task = item.querySelector('input[type=\"text\"]').value;\n    const filt = listCatalogue.filter((listItem) => task === listItem.description);\n    const filtTask = listCatalogue.indexOf(filt[0]);\n    listCatalogue.splice(filtTask, 1);\n  }\n}\n\nconst todayList = new Task();\n\nconst renderCatalogue = () => {\n  listCatalogue.sort((a, b) => a.index - b.index);\n  listCatalogue.forEach((item) => {\n    todayListBox.innerHTML += `<li class=\"list-item\">\n                    <div class=\"task-display\">\n                        <input type=\"checkbox\" name=\"tasks\" class=\"checkbox\">\n                        <input type=\"text\" name=\"tasks-item\" value=\"${item.description}\" class=\"task-item\" id=\"task-${item.index}\" readonly>\n                    </div>\n                        <i class=\"fa-solid fa-trash-can\"></i>\n                        <i class=\"fa-solid func fa-ellipsis-vertical\"></i>\n                </li>`;\n  });\n};\n\nconst addToDoItem = (item) => {\n  const complete = false;\n  const index = listCatalogue.length + 1;\n  todayList.createTask(index, complete, item);\n  todayListBox.innerHTML += `<li class=\"list-item\">\n                    <div class=\"task-display\">\n                        <input type=\"checkbox\" name=\"tasks\" class=\"checkbox\">\n                        <input type=\"text\" name=\"tasks-item\" value=\"${item}\" class=\"task-item\" id=\"task-${index}\" readonly>\n                    </div>\n                        <i class=\"fa-solid fa-trash-can\"></i>\n                        <i class=\"fa-solid func fa-ellipsis-vertical\"></i>\n                </li>`;\n  document.querySelector('input[name=\"task-input\"]').value = '';\n};\n\nconst taskFunction = (item) => {\n  const func = item.querySelector('.func');\n  const del = item.querySelector('.fa-trash-can');\n  const input = item.querySelector('input[name=\"tasks-item\"]');\n  const inputValue = input.value;\n  let ident;\n  item.style.backgroundColor = '#fcf299';\n  input.style.backgroundColor = '#fcf299';\n  func.style.display = 'none';\n  del.style.display = 'block';\n  input.removeAttribute('readonly');\n  input.focus();\n  listCatalogue.forEach(task => {\n    if (task.description == inputValue) {\n      ident = task.index;\n    }\n  });\n  input.addEventListener('keydown', () => {\n    listCatalogue.forEach(task => {\n      if (task.index == ident) {\n        task.description = item.querySelector('input[name=\"tasks-item\"]').value;\n      }\n    });\n  });\n  input.addEventListener('keypress', (event) => {\n    if (event.key === 'Enter') {\n      listCatalogue.forEach(task => {\n        if (task.index == ident) {\n          task.description = item.querySelector('input[name=\"tasks-item\"]').value;\n          input.setAttribute('readonly', 'readonly');\n          resetList();\n          resetColors();\n        }\n      });\n    }\n  });\n};\n\nconst resetColors = () => {\n  const listItems = document.querySelectorAll('li');\n  const inputs = document.querySelectorAll('input');\n  listItems.forEach((item) => {\n    item.style.backgroundColor = '#fff';\n  })\n  inputs.forEach((input) => {\n    input.style.backgroundColor = '#fff';\n  })\n}\n\nconst resetList = () => {\n  todayListBox.querySelectorAll('.func').forEach((button) => {\n    button.style.display = 'block';\n  });\n  todayListBox.querySelectorAll('.fa-trash-can').forEach((button) => {\n    button.style.display = 'none';\n  });\n};\n\naddList.addEventListener('click', () => {\n  const toDo = listInput.value;\n  if (toDo.length > 0) {\n    addToDoItem(toDo);\n  }\n});\n\nlistInput.addEventListener('keypress', (event) => {\n  resetColors();\n  if (event.key === 'Enter') {\n    const toDo = listInput.value;\n    if (toDo.length > 0) {\n      addToDoItem(toDo);\n    }\n  }\n});\n\nlistInput.addEventListener('click', () => {\n  resetList();\n  resetColors();\n});\n\ntaskInput.forEach(input => {\n  input.addEventListener('click', () => {\n    resetList();\n    resetColors();\n  });\n});\n\ntodayListBox.addEventListener('click', (event) => {\n  if (event.target.classList.contains('func')) {\n    const item = event.target.parentElement;\n    resetList();\n    resetColors();\n    taskFunction(item);\n  } else if (event.target.classList.contains('fa-trash-can')) {\n    const item = event.target.parentElement;\n    todayList.removeTask(item);\n    todayListBox.removeChild(item);\n  }\n});\n\nrenderCatalogue();\n\n\n//# sourceURL=webpack://to-do-list/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;